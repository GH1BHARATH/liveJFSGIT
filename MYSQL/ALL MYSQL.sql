-- SWITCH TO DATABASE  (MYSQL)
USE SAKILA; 
-- SELECT ALL ROWS FROM ACTOR TABLE
SELECT * FROM ACTOR;
SELECT ACTOR_ID, FIRST_NAME, LAST_NAME FROM ACTOR;

-- CREATE DATABASE
CREATE DATABASE  JBEDB;
USE JBEDB;
DROP TABLE PRODUCTS;
-- USE PRIMARY KEY TO AVOID DUPLICATES
-- FOREIGN KEY (COMING UP)
CREATE TABLE PRODUCTS(PRODUCT_ID INT AUTO_INCREMENT PRIMARY KEY, 
PRODUCT_NAME CHAR(50), PRICE FLOAT);
INSERT INTO PRODUCTS (PRODUCT_NAME, PRICE) VALUES ('LIMITLESS',55.50);
INSERT INTO PRODUCTS VALUES (2, 'SWW',155.50);
INSERT INTO PRODUCTS VALUES (3, 'TPON',155.50);
INSERT INTO PRODUCTS VALUES (4, 'LOY',780.50);
INSERT INTO PRODUCTS (PRODUCT_NAME, PRICE) VALUES ('7H',55.50);
UPDATE PRODUCTS SET PRODUCT_NAME = 'MSFM' WHERE PRODUCT_ID = 4;
DELETE FROM PRODUCTS WHERE PRODUCT_ID = 3;
SELECT * FROM PRODUCTS;

-- CREATE A LOGIN TABLE WITH USERID AND PASSWORD 
SELECT * FROM PRODUCTS WHERE PRODUCT_NAME = 'HP';
SELECT * FROM PRODUCTS WHERE PRICE >= 500;
SELECT * FROM PRODUCTS WHERE PRICE <= 700;
-- DELETE ALL THE PRODUCTS FROM THE TABLE
DELETE FROM PRODUCTS;

CREATE DATABASE JFSBOTDB;
USE JFSBOTDB;
CREATE TABLE PRODUCT (PRODUCT_ID INT, PRODUCT_NAME CHAR(50), PRICE FLOAT, AVAILABLE CHAR(5));
SELECT * FROM PRODUCT;
DELETE FROM PRODUCT WHERE PRODUCT_ID = 1;
INSERT INTO PRODUCT VALUES (100, 'DEEP WORK', 50.5, 'YES');

UPDATE PRODUCT SET PRODUCT_NAME = 'THE ALCHEMIST' WHERE PRODUCT_ID = 100;

-- COMMENTS (READABILITY OF CODE)
CREATE DATABASE TEST; 
USE TEST;
SHOW DATABASES;
-- STATIC VALUES
SELECT 'TODAY IS WEDNESDAY';
-- ARITHMETIC OPERATION
-- USING INBUILD ARITHMETIC OPERATIONS
SELECT PI();
SELECT 100 + 200;
SELECT MOD(45,7);
SELECT SQRT(25);
-- FETCH RECORDS FROM A TABLE
USE SAKILA;
-- SELECTS ALL COLUMNS AND ALL ROWS
SELECT * FROM ACTOR;
SELECT * FROM SAKILA.ACTOR;
-- SORT ORDER
SELECT * FROM ACTOR ORDER BY FIRST_NAME;
SELECT * FROM ACTOR ORDER BY FIRST_NAME ASC;
SELECT * FROM ACTOR ORDER BY FIRST_NAME DESC;
-- SORT ORDER BY COLUMN NUMBER
SELECT * FROM ACTOR ORDER BY 1;
SELECT * FROM ACTOR ORDER BY 2 DESC;
-- FILTERING RECORDS
SELECT * FROM ACTOR WHERE FIRST_NAME = 'JULIA';
SELECT * FROM ACTOR WHERE ACTOR_ID < 3;
-- EMPTY RESULT SET
SELECT * FROM ACTOR WHERE FALSE;
SELECT * FROM ACTOR WHERE 1 = 2; 
-- FUNCTIONS FOR NUMERIC OPERATIONS
SELECT ROUND (50.567);
SELECT ROUND (50.467);
SELECT ROUND (50.467,0);
SELECT ROUND (50.467,2);
 SELECT ROUND(-1.23);
 SELECT ROUND(-1.58);
 SELECT ROUND(1.58);
 SELECT ROUND(1.298, 1);
 SELECT ROUND(1.298, 0);
 SELECT ROUND(23.298, -1);
 SELECT ROUND(2356.567, -2);
SELECT ROUND(2356.567, -3);
SELECT FLOOR(1.2);
SELECT FLOOR(1.7);
SELECT CEILING (1.2);
SELECT CEILING (1.8);
SELECT FLOOR(-1.2);
SELECT FLOOR(-1.7);
SELECT CEILING (-1.2);
SELECT CEILING (-1.8);
-- STRING OPERATIONS
SELECT  '1' + '1'; -- ARITHMETIC OPERATIONS
SELECT  '1' + 'ABC1'; 
SELECT CONCAT('1','1');
SELECT CONCAT('1','ABC1');
-- USER DEFINED COLUMN HEADING
SELECT CONCAT('1','ABC1') AS 'CONTATENATED VALUE';
SELECT FIRST_NAME, LAST_NAME, CONCAT (FIRST_NAME, LAST_NAME) FROM ACTOR;
SELECT FIRST_NAME, LAST_NAME, CONCAT (FIRST_NAME, ' ', LAST_NAME) FROM ACTOR;
SELECT FIRST_NAME, LAST_NAME, CONCAT (FIRST_NAME, ' ', LAST_NAME) AS 'FULL NAME' FROM ACTOR;
-- GET THE INITIALS
SELECT LAST_NAME, LEFT(LAST_NAME,1) FROM ACTOR;
SELECT CONCAT(FIRST_NAME, '.', LEFT(LAST_NAME,1)) AS 'NAME WITH INITIALS' FROM ACTOR;
-- DATE OPERATIONS
SELECT LAST_UPDATE FROM ACTOR;
SELECT DATE_FORMAT(LAST_UPDATE, '%m/%d/%y') as LAST_UPDATED FROM ACTOR;
-- DISTINCT
SELECT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME;
SELECT DISTINCT FIRST_NAME FROM ACTOR ORDER BY FIRST_NAME;
SELECT COUNT(*) FROM ACTOR;
SELECT COUNT(FIRST_NAME) FROM ACTOR;
SELECT COUNT(DISTINCT FIRST_NAME) FROM ACTOR;
-- USING THE WHERE CLAUSE
-- WHERE clause Comparison Operators
-- Equal (=)
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE actor_id = 100;
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE first_name = 'Nick';
-- Less than (<)
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE actor_id < 100 ORDER BY ACTOR_ID DESC;
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE first_name < 'Nick';
-- Greater than (>)
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE actor_id > 100;
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE first_name > 'Nick';
-- Less than or Equal to (<=)
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE actor_id <= 100 ORDER BY ACTOR_ID DESC;
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE first_name <= 'Nick';
-- Greater than or Equal to (>=)
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE actor_id >= 100;
-- Not equal (<> or !=)
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE actor_id <> 1;
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE first_name != 'Nick';
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE first_name <> 'Nick';
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE NOT first_name = 'Nick';
-- PRACTICE [APPLY THE ABOVE QUERIES TO THE FILM TABLE]
SELECT * FROM FILM;
-- LOGICAL OPERATORS
-- AND
SELECT * FROM actor WHERE first_name = 'KENNETH';
-- USER STORY THE DETAILS OF NICK AND ED ARE NEEDED.
SELECT * FROM actor WHERE first_name = 'KENNETH' OR FIRST_NAME = 'ED';
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' AND actor_id < 90;
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' AND actor_id < 100 AND last_name = 'TORN';
-- OR
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH';
-- GET KENNETH'S DETAILS AND ALL THE OTHER ACTORS WHOSE ID IS LESS THAN 100
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' OR actor_id < 100; 
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' OR actor_id < 100 OR last_name = 'TEMPLE';
-- NOT
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE NOT actor_id = 5;
SELECT actor_id, first_name, last_name FROM sakila.actor WHERE actor_id <> 5;
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' AND actor_id < 100 OR last_name = 'TEMPLE';
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' OR last_name = 'TEMPLE' AND actor_id < 100;
SELECT * FROM sakila.actor WHERE (first_name = 'KENNETH' AND actor_id < 80) OR last_name = 'TEMPLE';
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' AND (actor_id < 100 OR last_name = 'TEMPLE');
SELECT * FROM sakila.actor WHERE (first_name = 'KENNETH' OR last_name = 'TEMPLE') AND actor_id < 100;
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' OR (last_name = 'TEMPLE' AND actor_id < 100);
SELECT * FROM sakila.actor WHERE NOT (first_name = 'KENNETH' OR (last_name = 'TEMPLE' AND actor_id < 100));
SELECT * FROM sakila.actor WHERE first_name = 'KENNETH' OR NOT(last_name = 'TEMPLE' AND actor_id > 100);
-- CREATING TABLES
SELECT * FROM ACTORSAMPLE1;
DROP TABLE ACTORSAMPLE1;
CREATE TABLE ACTORSAMPLE1 ( ACTOR_ID SMALLINT NOT NULL, FIRST_NAME VARCHAR(50) NULL);
SELECT * FROM ACTORSAMPLE1;
INSERT INTO ACTORSAMPLE1 VALUES (1, 'RAMBO');
INSERT INTO ACTORSAMPLE1 VALUES (2, NULL);
INSERT INTO ACTORSAMPLE1 VALUES (NULL, 'JOHN');
-- PRIMARY KEY
SELECT * FROM ACTORSAMPLE2;
DROP TABLE ACTORSAMPLE2;
CREATE TABLE ACTORSAMPLE2 ( ACTOR_ID SMALLINT NOT NULL PRIMARY KEY, FIRST_NAME VARCHAR(50) NULL);
SELECT * FROM ACTORSAMPLE2;
INSERT INTO ACTORSAMPLE2 VALUES (1, 'RAMBO');
INSERT INTO ACTORSAMPLE2 VALUES (2, NULL);
INSERT INTO ACTORSAMPLE2 VALUES (NULL, 'JOHN');
INSERT INTO ACTORSAMPLE2 VALUES (3, 'RAMBO');
DESCRIBE ACTORSAMPLE2;
SELECT CURRENT_TIMESTAMP;
DROP TABLE ACTORSAMPLE2;

-- CREATE A TABLE
CREATE TABLE ACTORSAMPLE
(
actor_id SMALLINT NOT NULL AUTO_INCREMENT,
FIRST_NAME VARCHAR(50) NOT NULL,
last_name VARCHAR(50),
LAST_UPDATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
PRIMARY KEY (ACTOR_ID)
);
-- INSERT ALL FIELDS
INSERT INTO ACTORSAMPLE VALUES (100, 'GAUTHAM', 'BUDDHA', '2021-01-04');
SELECT * FROM ACTORSAMPLE;
-- INSERT SPECIFIC FIELDS
INSERT INTO ACTORSAMPLE (FIRST_NAME,last_name,LAST_UPDATE) VALUES  ( 'KRISHNA', 'LORD', '2020-01-04');
INSERT INTO ACTORSAMPLE (FIRST_NAME,last_name,LAST_UPDATE) VALUES  ( 'RAMA', 'KRISHNA', '2020-01-03');
INSERT INTO ACTORSAMPLE (FIRST_NAME,last_name,LAST_UPDATE) VALUES  ( 'SITA', 'KRISHNA', '2020-01-05');
INSERT INTO ACTORSAMPLE VALUES  (100, 'GAUTHAM', 'BUDDHA', '2019-01-04');
INSERT INTO ACTORSAMPLE VALUES  (DEFAULT, 'GAUTHAM', 'BUDDHA', '2020-01-04');
INSERT INTO ACTORSAMPLE VALUES  (NULL, 'GAUTHAM', 'BUDDHA', '2020-01-04');
INSERT INTO ACTORSAMPLE VALUES  (DEFAULT, NULL, 'BUDDHAS', '2020-01-04');
-- INSERT A RECORD AND LET SQL AUTOMATICALLY ADD THE LAST_UPDATE
INSERT INTO ACTORSAMPLE (first_name,last_name) VALUES ('GOUTHAM','BUDHA');

-- INSERT MULTIPLE VALUES
SELECT * FROM ACTORSAMPLE;
INSERT INTO ACTORSAMPLE (first_name,last_name) VALUES 
('GOUTHAM1','BUDHA'),
('GOUTHAM2','BUDHA'),
('GOUTHAM3','BUDHA');
INSERT INTO ACTORSAMPLE VALUES  (100, 'GAUTHAM', 'BUDDHA', '2019-01-04');
-- DELETE ALL ROWS
DELETE FROM ACTORSAMPLE;
DELETE FROM ACTORSAMPLE WHERE ACTOR_ID = 100;
DELETE FROM ACTORSAMPLE WHERE FIRST_NAME = 'GAUTHAM' AND LAST_NAME = 'BUDDHA';
-- REMOVE A TABLE (STRUCTURE AND THE DATA)
DROP TABLE ACTORSAMPLE;

-- JIONS
DROP TABLE TABLE1;
DROP TABLE TABLE2;
-- Create table 1
CREATE TABLE table1
(ID INT, Value VARCHAR(10));

-- UNION
SELECT 1 AS 'NUMBER','RED' AS 'COLOR'  
UNION   
SELECT 2,'GREEN'  
UNION ALL  
SELECT 1,'RED';  

SELECT TITLE FROM FILM
UNION
SELECT FIRST_NAME FROM ACTOR;

-- DIFFERENT WAY OF INSERTING RECORDS INTO A TABLE
INSERT INTO Table1 (ID, Value)
SELECT 1,'RED' 
UNION ALL 
SELECT 2,'GREEN' 
UNION ALL 
SELECT 3,'BLUE'; 

/* INSERT INTO Table1 (ID, Value)
SELECT 1,'First'
UNION ALL
SELECT 2,'Second'
UNION ALL
SELECT 3,'Third' */


-- Create table 2
CREATE TABLE table2
(ID INT, Value VARCHAR(10));
INSERT INTO Table2 (ID, Value)
SELECT 2,'BASKET'
UNION ALL
SELECT 3,'BASE'
UNION ALL
SELECT 6,'CRICKET'
UNION ALL
SELECT 7,'FOOT';

SELECT * FROM Table1 
UNION 
SELECT * FROM Table2; 

-- ----------- JOINS ----------------------
-- CROSS JION
SELECT * FROM Table1 CROSS JOIN TABLE2;
-- INNER JOIN
SELECT * FROM Table1  INNER JOIN TABLE2 
ON Table1.ID = Table2.ID; 
-- LEFT JOIN
SELECT * FROM Table1 LEFT JOIN TABLE2
ON Table1.ID = Table2.ID;
SELECT * FROM Table1 LEFT OUTER JOIN TABLE2
ON Table1.ID = Table2.ID;

-- RIGHT JOIN
SELECT * FROM Table1 
RIGHT JOIN TABLE2
ON Table1.ID = Table2.ID;

SELECT * FROM Table1 
RIGHT OUTER JOIN TABLE2
ON Table1.ID = Table2.ID;

SELECT TITLE, NAME FROM FILM
INNER JOIN LANGUAGE 
ON FILM.LANGUAGE_ID = LANGUAGE.LANGUAGE_ID;

SELECT TITLE, NAME FROM FILM, LANGUAGE 
WHERE FILM.LANGUAGE_ID = LANGUAGE.LANGUAGE_ID;

SELECT FIRST_NAME, TITLE FROM ACTOR
INNER JOIN FILM_ACTOR ON ACTOR.ACTOR_ID = FILM_ACTOR.ACTOR_ID
INNER JOIN FILM ON FILM_ACTOR.FILM_ID = FILM.FILM_ID;

-- CONSTRAINTS
-- PRIMARY KEY
CREATE TABLE NEWAUTHOR1
(AUT_ID CHAR(5) NOT NULL PRIMARY KEY, 
AUT_NAME VARCHAR(100) NOT NULL
);
insert into newauthor1 values (2,'MONK');
insert into newauthor1 values (1,'MONKS');
SELECT * FROM NEWAUTHOR1;
DROP TABLE NEWBOOK1;
-- FOREIGN KEY
CREATE TABLE NEWBOOK1(
BOOK_ID CHAR(5) NOT NULL PRIMARY KEY,
BOOK_NAME VARCHAR(50) NOT NULL,
AUT_ID CHAR(5),
FOREIGN KEY (AUT_ID) REFERENCES NEWAUTHOR1(AUT_ID)
);
DESCRIBE NEWAUTHOR1;
DESCRIBE NEWBOOK1;
SELECT * FROM NEWBOOK1;
insert into NEWBOOK1 values (1,'MONKS',3);
insert into NEWBOOK1 values (2,'MONKS',NULL);
insert into NEWBOOK1 values (3,'SKY',NULL);
insert into NEWBOOK1 values (1,'SKY',1);
insert into NEWBOOK1 values (10,'EARTH',1);
insert into NEWBOOK1 values (10,'SKY',2);

-- COMPOSITE PRIMARY KEY
CREATE TABLE EMPLOYEETEMP (
FNAME CHAR(10),
LNAME CHAR(10),
CITY CHAR(10),
PRIMARY KEY (FNAME, LNAME)
);
DESCRIBE EMPLOYEETEMP;
SELECT * FROM EMPLOYEETEMP;
INSERT INTO EMPLOYEETEMP VALUES ('SAM', 'PETER', 'MUMBAI'); 
INSERT INTO EMPLOYEETEMP VALUES ('SAM', 'JOHN', 'MUMBAI'); 
INSERT INTO EMPLOYEETEMP VALUES ('ELTON', 'JOHN', 'MUMBAI'); 
-- ERROR 1062 (23000): Duplicate entry 'SAM-JOHN' for key 'employeetemp.PRIMARY'
INSERT INTO EMPLOYEETEMP VALUES ('SAM', 'JOHN', 'CHENNAI'); 
SELECT * FROM EMPLOYEETEMP; 
CREATE TABLE EMPLOYEEHOBBY(
FNAME CHAR(10),
LNAME CHAR(10),
HOBBY  CHAR(10),
FOREIGN KEY (FNAME,LNAME) REFERENCES EMPLOYEETEMP(FNAME,LNAME)
);
SELECT * FROM EMPLOYEEHOBBY;
INSERT INTO EMPLOYEEHOBBY VALUES ('SAM', 'PETER', 'CRICKET'); 
INSERT INTO EMPLOYEEHOBBY VALUES ('SAM', 'BILL', 'GOLF'); 
INSERT INTO EMPLOYEEHOBBY VALUES ('ELTON', 'JOHN', 'MUSIC'); 
INSERT INTO EMPLOYEEHOBBY VALUES ('BILLY', 'JOHN', 'SKYDIVE'); 

-- FIND THE COUNT OF NUMBER OF TIMES EACH NAME REPEATS AND DISPLAY THE NAME AND COUNT.
-- GROUP BY
USE SAKILA;
SELECT FIRST_NAME FROM ACTOR;
SELECT COUNT(FIRST_NAME) FROM ACTOR;
SELECT COUNT(DISTINCT FIRST_NAME) FROM ACTOR;
SELECT FIRST_NAME, COUNT(FIRST_NAME) FROM ACTOR
GROUP BY FIRST_NAME
ORDER BY COUNT(FIRST_NAME);
SELECT * FROM ACTOR WHERE FIRST_NAME = 'JULIA';
SELECT * FROM FILM;
SELECT COUNT(*) FROM FILM;
SELECT COUNT(RENTAL_RATE) FROM FILM;
SELECT COUNT(RENTAL_RATE), SUM(RENTAL_RATE), MAX(RENTAL_RATE), MIN(RENTAL_RATE), AVG(RENTAL_RATE) FROM FILM;
SELECT SPECIAL_FEATURES FROM FILM;
SELECT SPECIAL_FEATURES, COUNT(SPECIAL_FEATURES) FROM FILM GROUP BY SPECIAL_FEATURES ORDER BY SPECIAL_FEATURES;